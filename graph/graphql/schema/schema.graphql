directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

enum PoolType
@goModel(
    model: "github.com/marosmars/resourceManager/ent/resourcepool.PoolType"
)
{
    set
    singleton
}

scalar Map

type Resource
@goModel(model: "github.com/marosmars/resourceManager/ent.Resource")
{
    ID: Int!
}

type PropertyType
@goModel(model: "github.com/marosmars/resourceManager/ent.PropertyType"){
    ID: Int!
    Name: String!
    Type: String!,
    IntVal: Int!,
    StringVal: String!,
    FloatVal: Float!,
    Mandatory: Boolean!
}

type ResourcePool
@goModel(model: "github.com/marosmars/resourceManager/ent.ResourcePool"){
    ID: Int!
    Name: String!
    PoolType: PoolType!
    Edges: ResourcePoolEdges
}

type Label
@goModel(model: "github.com/marosmars/resourceManager/ent.Label"){
    ID: Int!
    Labl: String!
}

type ResourcePoolEdges
@goModel(model: "github.com/marosmars/resourceManager/ent.ResourcePoolEdges"){
    ResourceType: ResourceType!
    Labels: Label
}

type ResourceTypeEdges
@goModel(model: "github.com/marosmars/resourceManager/ent.ResourceTypeEdges"){
    PropertyTypes: [PropertyType]
    Pools: [ResourcePool]
}

type ResourceType
@goModel(model: "github.com/marosmars/resourceManager/ent.ResourceType"){
    ID: Int!
    Name: String!
    Edges: ResourceTypeEdges
}

type Query {
    QueryResource(input: Map!, poolName: String!): Resource!
    QueryResources(poolName: String!): [Resource]!
    QueryResourceTypes: [ResourceType]!
    QueryResourcePools: [ResourcePool]!
}

type Mutation {
    # managing resources via pools
    ClaimResource(poolName: String!): Resource!
    FreeResource(input: Map!, poolName: String!): String!

    # create/delete resource pool
    CreatePool(poolType: PoolType, resourceTypeId: Int!, poolName: String!, poolValues: [Map], allocationScript: String!): ResourcePool!
    DeleteResourcePool(resourcePoolId: Int!): String!

    # create/update/delete resource type
    CreateResourceType(resourceName: String!, resourceProperties: Map!): ResourceType!
    DeleteResourceType(resourceTypeId: Int!): String!
    UpdateResourceTypeName(resourceTypeId: Int!, resourceName: String!): ResourceType!
    AddResourceTypeProperty(resourceTypeId: Int!, resourceProperties: Map!): ResourceType! # new property type added
    AddExistingPropertyToResourceType(resourceTypeId: Int!, PropertyTypeId: Int!): Int! # existing property type added
    RemoveResourceTypeProperty(resourceTypeId: Int!, PropertyTypeId: Int!): ResourceType! # remove property type

    # property type create/update/delete
    CreatePropertyType(propertyName: String!, typeProperties: Map!): PropertyType!
    UpdatePropertyType(propertyTypeId: Int!, propertyName: String!, typeProperties: Map!): Boolean!
    DeletePropertyType(propertyTypeId: Int!): Boolean!
}